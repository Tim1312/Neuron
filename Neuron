#include <cstddef>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

typedef double (*ActFunc)(double);

class Neuron {
public:
	Neuron(size_t in_amt, ActFunc func)
		: m_in_amt(in_amt), m_func(func) { }

	Neuron(const Neuron& n)
		: m_in_amt(n.m_in_amt), m_func(n.m_func) { }

	Neuron& operator=(const Neuron& n) {
		m_in_amt = n.m_in_amt;
		m_func   = n.m_func;
		return *this;
	}

	double get(double* values) const {
		size_t idx = 0;
		double sum = 0;
		for (size_t i = 0; i < m_in_amt; ++i) {
			sum += values[idx] + values[idx + 1];
			idx += 2;
		}
		return m_func(sum);
	}

private:
	size_t m_in_amt;
	ActFunc m_func;
};

double sigmoid(double h) {
	return 1 / (1 + exp(-h));
}

int main() {
	srand(static_cast<unsigned>(time(NULL)));

	int amt = 0;
	fputs("Enter amount of inputs: ", stdout);
	scanf("%d", &amt);
	double* values = new double[amt * 2];
	printf("Enter %d pairs: input value and synapse value:\n", amt);
	for (size_t i = 0; i < amt * 2; i += 2) {
		scanf("%lf %lf", values + i, values + i + 1);
	}
	Neuron n(amt, sigmoid);
	printf("Func is 1 / (1 + exp(-h))\nThere are %d inputs"
		"\nResult is %.9f", amt, n.get(values));
}
